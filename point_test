
// Point test code


/* Default Constructor
  * Should create Point of 2 dimensions with value (0.0)
  */

 Point ptOne;
 cout << ptOne;

 /* Custom Constructor
  * We pass in the dimension, each coordinate is intitialized
  * to 0    i.e (0,0,0...0)
  */

 Point ptTwo(4);
 cout << ptTwo;


 /* Custom Constructor
  * We pass in dimension value and an array of doubles that become
  * the coordinates of the Point objects
  */

 double coordinates[3] = {2,4,6};
 Point ptThree(3,coordinates);
 cout << ptThree;

 /* Copy Constructor
  * will copy over dimension and each coordinate value of
  * existing Point
  *
  * Case 1:       Should print "... 3 dimensions with coordinate values ( 2 4 6) for
  *               Point ptFour(ptThree)
  *
  * Case 2:       for Point ptFive(ptOne), ptOne was intialized using default constructor so
  *               so for ptFive should  print "... 2 dimensions with coordinate values ( 0 0 )
  *
  * Case 3;       if Point to be copied over to new Point doesn't exist, should give compile error
  */

 Point ptFour(ptThree);
 cout << ptFour;

 Point ptFive(ptOne);
 cout << ptFive;

 //Point ptFive(Point point);   gives compilation error

 /* Assignment Operator
  * lhs Point  data is erased and new data including size is assigned to it
  * based on rhs Point
  *
  * Case 1: Self Assignment
  *         code prevent self assignment by just returning calling Point as it existed before
  *         = function call
  *         ptFive = ptFive;   should just print ".. 2 dimensions with coordinate values (0,0)
  *         for a cout call to ptFive
  *
  * Case 2: lhs Point is being declared and initialized
  *         Point ptSix = ptThree;
  *         should print ".. 3 dimensions with coordinate values (2 4 6 )
  *
  * Case 3: lhs Point already exists and is reassigned data
  *         ptSix = ptFive;
  *         should print "... 2 dimensions with coordinate values (0.0)
  */

 ptFive = ptFive;
 cout << ptFive;

 Point ptSix = ptThree;
 cout << ptSix;

 ptSix = ptFive;
 cout << ptSix;



 /* getValue()
  * gets coordinate from specified dimension
  *
  * Case 1: a valid dimension is passed, coorinate returned
  *         ptThree.getvalue(3)   // should return a 6
  *
  *Case 2:  an invalid dimension is passed
  *         error message appears and program is terminated
  */

 cout << endl << ptThree.getValue(3) << endl;

// cout << endl << ptThree.getValue(6) << endl;      error message, terminates program


 /* getDimension()
  * returns number of dimensions a Point has
  */

 Point ptSeven(4);
 cout << endl << ptSeven.getDimension() << endl;     // should return a 4

 Point ptEight;
 cout << endl << ptEight.getDimension() << endl;    // should have default dimension of 2



 /* Overloaded [] index operator
  * treats each coordinate in Point as an element in an array
  * pt[3]  would return coordinate contained in third dimension
  *
  * Case 1:  A valid index/ coordinate dimension is passed
  *          ptNine[3] should return a 5
  *
  * Case 2:  An invalid index/coordinate dimension is passed
  *          gives error message then terminated program
  */

 double nineCoor[4] = {1,3,5,7};
 Point ptNine(4,nineCoor);
 cout << endl << ptNine[3] << endl;    // prints 5


// cout << endl << ptNine[7] << endl;  // prints error message, terminates program


/* setValue()
 * sets coordinate of dimension passed in
 *
 * Case 1: valid dimension passed in
 *
 * Case 2: dimension passed in exceeds that of the Point
 *         error message then exits function
 */

 Point ptTen(4);          // all four coordinates set to (0 0 0 0)
 ptTen.setValue(2,8);
 ptTen.setValue(4,16);
 cout << ptTen;           // should print (0,8,0,16);

ptTen.setValue(8,9);      // issues error message


/* distanceTo
 * calculates distance between 2 Point-s
 *
 * Case 1:  Points are of same dimension
 *          returns valid answer
 *
 * Case 2:  Points have different number of dimensions
 *          error message issued, returns 0
 */

 double elevenCoor[3] = {2,4,6};
 Point ptEleven(3, elevenCoor);
 cout << ptEleven;

 double twelveCoor[3] = {4,6,8};
 Point ptTwelve(3,twelveCoor);
 cout << ptTwelve;

 double thirtCoor[2] = {1,1};
 Point ptThirt(2,thirtCoor);
 cout << ptThirt;

 cout << endl << (ptEleven.distanceTo(ptTwelve)) << endl;        // should print 3.4641
 cout << endl << (ptTwelve.distanceTo(ptEleven)) << endl;        // should print 3.461

 cout << endl << (ptThirt.distanceTo(ptEleven)) << endl;



/*  Point &operator*= (double);
 * multiplies each coordinate by the double passed in and modifies calling Point directly
 */

 Point pt(4);
 pt.setValue(1,1);
 pt.setValue(2,1);
 pt.setValue(3,1);
 pt.setValue(4,1);

 cout << endl << (pt *= 4) << endl;      // Should print ( 4 4 4 4 )
 cout << pt;                             // Should print ( 4 4 4 4)
 pt *= 0;
 cout << pt;                             // Should print (0 0 0 0)




/* Point &operator/= (double)
 * modifies calling Point by dividing by double passed in
 *
 * Case 1:   a nonzero double passed in
 *
 * Case 2:   zero passed in
 *           error message "Undefined. Can't divide by 0:
 *           calling Point is returned unchanged
 */

 Point pt_1(4);
 pt_1.setValue(1,1);
 pt_1.setValue(2,1);
 pt_1.setValue(3,1);
 pt_1.setValue(4,1);

 pt_1 /= 2;

 cout << pt_1;              // should print ( .5 .5 .5 .5)

 pt_1 /= 0;                 // error message

 cout << pt_1;              // should still print ( .5 .5 .5 .5)


 /*  const Point operator*(double) const
  * returns new Point object,
  * doesn't directly modify lhs Point
  */

 Point p2;

 p2 = (pt_1 * 2);          // pt_1 is currently (  .5 .5 .5 .5 )

 cout << p2;                // should print ( 1 1 1 1 )


/*  const Point operator/(double) const;
 * returns new Point object
 * doesn't directly modify lhs Point
 *
 * Case 1:    nonzero double on rhs
 *
 * Case 2:    zero passed in
 *            error message issued, lhs Point copy is returned
 */

 Point p3;

 p3 = (p2 / 10);     // p2 is currently ( 1 1 1 1 )

 cout << p3;         // should print ( .1 .1 .1 .1 )

 p3 = (p2/0);       // will issue error message and return a copy Point of p2

 cout << p3;        // should print   (1 1 1 1 )


/* friend Point &operator+=(Point &, const Point &)
 * modifies lhs Point. adds coorespding coordinates together.
 *
 * Case 1:   same point added with itself
 *           p4 += p4
 *           will multiply every coordinate by 2
 *
 * Case 2:    two points of same dimension added
 *            p4 += p3;
 *
 * Case 3:    points of different dimensions added
 *            issues error message. lhs Point unchanged
 */

 double p4Coor[4] = {2 , 1 , 1 ,2};
 Point p4(4,p4Coor);

 p4 += p4;
 cout << p4;     // should print ( 4 2 2 4 )

 p4 += p3;       // p3 currently (1 1 1 1)
 cout << p4;      // should print ( 5 3 3 5)

 Point p5(2);

 p4 += p5;      // issues error message
 cout << p4;    // should print ( 5 3 3 5)


    /* friend Point &operator-=(Point &, const Point &)
     * modifies lhs Point
     *
     * Case 1:      point subtracted by itself
     *              multiplies all coordinates by 0
     *
     *Case 2:       two points of same dimension subtracted
     *              p6 -= p7;
     *
     * Case 3:      two points of different dimensions subtracted
     *              issues error message, no point changed
     */

    Point p6(p3);                           // p3 currently ( 1 1 1 1 )

    double p7Coor[4] = { 10, 9 ,8,7};
    Point p7(4,p7Coor);

    p3 -= p3;
    cout << p3;                     // should print ( 0 0 0 0)

    p7 -= p6;
    cout << p7;                     // should print ( 9 8 7 6)

    p7 -= p5;                       // p7 is of 4 dimensions, p5 has 2 dimensions
                                    // issues error message
    cout << p7;                     // should print ( 9 8 7 6 )


    /* friend const Point operator+(const Point &, const Point &)
     * returns new Point
     *
     * Case 1:          two points of same dimension added
     *                  p7 + p6
     *
     * Case 2:          two points of different dimensions added
     *                  p7 + p5
     *                  issues error message, returns copy of an unchanged lhs Point
     */

    Point p8;

    p8 = p7 + p6;         // p7 = ( 9 8 7 6)        p6 = (1 1 1 1)
    cout << p8;           // should print ( 10 9 8 7)

    p8 = p7+p5;           // issues error message, returns copy of lhs Point
    cout << p8;             // p8 unchanged , prints ( 9 8 7 6)


    /* friend const Point operator-(const Point &, const Point &);
     * returns new Point
     *
     * Case 1:          two point of same dimension subtracted
     *                  p7 - p6
     *
     *Case 2:           two point of different dimensions subtracted
     *                  issues error message, returns copy of an unchanged lhs Point
     */

    p8 = p7-p6;         // p7 = ( 9 8 7 6)          p6 = (1 1 1 1 )
    cout << p8;         // should print (8 7 6 5)

    p8 = p7 - p5;       // points of different dimensions, returns copy of p7
    cout << p8;         // should print ( 9 8 7 6)


    /*  friend bool operator==(const Point &, const Point &)
     * compares coordinate wise
     *
     * Case 1:      two points of same dimension compared and are equal
     *
     * Case 2:      two points of same dimension compared and not equal
     *
     * Case 3:      two points of different dimension compared
     *              issues error message, returns 0 for false
     */

    Point p9;
    Point p10(p9);

    cout << endl << (p9 == p10) << endl;        // should print 1

    Point p11(2);
    p11.setValue(1,4);
    p11.setValue(2,7);

    cout << endl << (p9 == p11) << endl;        // should print 0

    Point p12(6);

    cout << endl << (p12 == p10) << endl;       // prints error message about dimensions, prints 0


   /* friend bool operator!=(const Point &, const Point &)
    * compared coordinate wise
    *
    * Case 1:       two points of same dimension compared
    *
    * Case 2;       two points of different dimension compared
    *               error message issued , returns 1 for not equal
    */

    cout << endl << (p9 != p10) << endl;       // prints 0 , since they are equal

    cout << endl << (p9 != p11) << endl;        // prints 1, since they are not equal

    cout << endl << (p9 != p12) << endl;       // error message, returns 1 for not equal

    /* friend bool operator<(const Point &, const Point &)
     *
     * friend bool operator>(const Point &, const Point &);
     *
     *  friend bool operator<=(const Point &, const Point &);
     *
     *  friend bool operator>=(const Point &, const Point &);
     *
     * compared coordinate wise lexicographically
     * Case 1:       two points of same dimension compared
     *
     * Case 2;       two points of different dimension compared
     *               error message issued , returns 1 for not equal
     */

    double Coor3[3] = {1,1,1};
    Point a(3, Coor3);

    double Coor4[3] = {0,0,1};
    Point b(3, Coor4);

    cout << endl << endl << "Start here:" << endl << (a<b) << endl;          // should print 0 for false
    cout << endl << (b<a) << endl;          // should print 1 for true;

    cout << endl << (b < p9) << endl;       // points of different dimensions, error message, returns 0 for false

    cout << endl << (a>b) << endl;          // prints 1 for true
    cout << endl << (b>a) << endl;          // prints 0 for false

    cout << endl << (b > p9) << endl;        // points of different dimensions, error message, returns 0 for false

    cout << endl << (a <= a) << endl;       // prints 1 for true
    cout << endl << (a <= b) << endl;       // prints 0 for false
    cout << endl << (b <= a) << endl;       // prints 1 for true

    cout << endl << (b <= p9) << endl;      // points of different dimensions, error message, returns 0 for false

    cout << endl << (b >= b) << endl;       // prints 1 for true
    cout << endl << (a >= b) << endl;       // prints 1 for ture
    cout << endl << (b >= a) << endl;       // prints 0 for false

    cout << endl << (b >= p9) << endl;      // points of different dimensions, error message, returns 0 for false